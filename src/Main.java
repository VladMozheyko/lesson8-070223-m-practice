public class Main {

    /*
    План занятия
    1) HashMap
     */

    /*
    Теория
    Hash - функция представляет объект в виде числового значения. Алгоритма перевода в число могут быть разные, но у всех
    есть общие свойства.
    HashCode дает числовое представление объекта, если HashCode-ы объектов не совпали, то дальше объекты можно не сравнивать,
    если совпали это не значит, что объекты равны - нужно продолжать проверку.

    Hello    -  Привет          - Словарь   в обычном понимании слова

    Словарь - структура данных, в которой каждый элемент имеет свой ключ, по которому к нему можно обратиться(пара ключ-значение)
    Синонимы: Карты(Map), Dictionary, множество, хеш-таблицы

    Задача
    Для русского слова выдавать его английский перевод
    Решение
    Создадим массив, в котором каждое англисйкое слово будет располагаться по хешу русского слова - сделаем ключ для перевода
    слова по самому слову.

    Сложность доступа к элементу равна O(1) - константная сложность, т.е. неважно каких размеров структура, эта операция
    всегда будет требовать одинаковое количество операция

    Недостатков хеш-таблиц является чрезмерное расходование памяти - принято выделять в два раза больше памяти, чем планируется
    использовать во избежание коллизий - ситуаций, когда ключ выдал уже занятую позицию

    Коллизия(хеш-промах) - хеш-функция вычисляет позицию для элемента, но нет гарантии, что эта позиции уже не занята другим
    элементом

    Решение проблем с коллизиями: линейное пробирование, квадратичное пробирование и двойное хеширование - Глава 11(стр. 487)

    Недостатки хеш-таблиц:
    1) Большой расход памяти
    2) Коллизии
    3) Проблемы с расширением структуры - при выделении дополнительной памяти, необходимо заново вычислять позиции элементов

    Преимущества
    Быстрый доступ к элементам - константная сложность






     */

    /*
    Заметки

     */

    public static void main(String[] args) {
	String str = "Привет";

    System.out.println(str.hashCode());

    HashMap<String, String> hashMap = new HashMap<>();
    hashMap.insert("Привет", "Hello");
    hashMap.display();
    System.out.println("Значение: " + hashMap.find("Привет"));

    hashMap.insert("Пока", "Bye");

    hashMap.display();
    System.out.println("Значение: " + hashMap.find("Пока"));

        hashMap.insert("Корабль", "Ship");
        hashMap.display();

        hashMap.insert("Самолет", "Plane");
        hashMap.display();

        hashMap.insert("Машина", "Car");
        hashMap.display();

        hashMap.insert("Торт", "Cake");
        hashMap.display();

        hashMap.insert("Конфета", "Candy");
        hashMap.display();

    }
}
